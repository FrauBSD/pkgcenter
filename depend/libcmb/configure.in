# $FrauBSD: pkgcenter/depend/libcmb/configure.in 2019-08-23 18:13:04 -0700 freebsdfrau $

AC_INIT
############################################################ CONFIGURATION

#
# AC_PREREQ (VERSION)
# 	Minimum version of autoconf required to generate `configure'.
#
AC_PREREQ(2.69)

#
# AC_REVISION (REVISION-INFO)
# 	Place static version identifier information into autoconf-generated
# 	`configure' for source-code tracking purposes.
#
AC_REVISION($Revision: 1.6 $)

#
# AC_CONFIG_HEADERS (HEADER ..., [CMDS], [INIT-CMDS])
# 	Define header containing C preprocessor #define statements.
#
AC_CONFIG_HEADERS(config.h)

#
# AC_CONFIG_AUX_DIR (DIR)
# 	Use auxiliary build tools (e.g., `install-sh', `config.sub',
# 	`config.guess', etc.) in directory DIR.
#
AC_CONFIG_AUX_DIR(cfgaux)

############################################################ DEFINES

#
# Definitions for autoheader (creates config.h.in)
#
if ! :; then
AC_DEFINE(CMB_DEBUG, [],
	[Define to 1 if you want to enable extra debugging options.])
AC_DEFINE(HAVE_OPENSSL_BN_H, [],
	[Define to 1 if you have the <openssl/bn.h> header file.])
AC_DEFINE(HAVE_OPENSSL_CRYPTO_H, [],
	[Define to 1 if you have the <openssl/crypto.h> header file.])
fi

############################################################ OPTIONS

AC_ARG_ENABLE(debug,
	AS_HELP_STRING([--enable-debug], [Enable extra debugging options]),
	AC_DEFINE(CMB_DEBUG, 1))
AC_ARG_WITH(openssl,
	AS_HELP_STRING([--without-openssl], [Ignore/Disable OpenSSL support]))

############################################################ TESTS

#
# Change prefix to suitable default if none given
#
[[ "${prefix#NONE}" ]] || prefix=/usr/local
if [[ "$prefix" != /usr ]]; then
	CFLAGS="${CFLAGS:+$CFLAGS }-I$prefix/include"
	LDFLAGS="${LDFLAGS:+$LDFLAGS }-L$prefix/lib"
fi

#
# Compute the canonical host-system type variable (`host') and its three
# individual parts `host_cpu', `host_vendor', and `host_os'.
#
AC_CANONICAL_HOST

#
# Compute CC variable
#
AC_PROG_CC(clang gcc cc cl.exe)

#
# Debug flags
#
AS_IF(test "$enable_debug" = yes, CFLAGS="${CFLAGS:+$CFLAGS }-g")

#
# Generic header checks
#
# AC_CHECK_HEADER (HEADER-FILE, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
# 	Define HAVE_* for if header-file exists.
#
AS_IF(test "$with_openssl" != no, [
	AC_CHECK_HEADER(openssl/bn.h, AC_DEFINE(HAVE_OPENSSL_BN_H, 1))
	AC_CHECK_HEADER(openssl/crypto.h, AC_DEFINE(HAVE_OPENSSL_CRYPTO_H, 1))
])

#
# Library checks
#
# AC_CHECK_LIB (LIB, FUNC, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND], [LIBS])
# 	Prepend `-l<LIB>' to LIBS if library provides function.
#
AS_IF(test "$with_openssl" != no, AC_CHECK_LIB(crypto, BN_new))

############################################################ OUTPUTS

#
# Compiler/linker flags
#
add_crypto()
{
	AC_DEFINE(HAVE_LIBCRYPTO, 1)
	LIBS="${LIBS:+$LIBS }-lcrypto"
}
AS_IF([test "$host_os" != "${host_os#darwin}"],
[
	CFLAGS="${CFLAGS:+$CFLAGS }-mmacosx-version-min=\$(OSX_MIN)"
	LDFLAGS="${LDFLAGS:+$LDFLAGS }-isysroot /"
	AS_IF([test "$ac_cv_lib_crypto_BN_new" = no &&
		test "$ac_cv_header_openssl_bn_h" = yes],
	[
		AC_CHECK_FILE(/usr/lib/libcrypto.dylib, add_crypto,
		  AC_CHECK_FILE($prefix/lib/libcrypto.dylib, add_crypto))
	])
])
AS_IF(test "$CC" = clang, [
	CFLAGS="${CFLAGS:+$CFLAGS }$( echo \
		-Weverything \
		-Wno-disabled-macro-expansion \
		-Wno-extra-semi \
		-Wno-padded \
		-Wno-reserved-id-macro \
		-Wno-unused-macros \
		-Wno-unknown-warning-option \
	)"
])

#
# AC_CONFIG_FILES (FILE ..., [COMMANDS], [INIT-CMDS])
# 	Files to instantiate.
#
AC_CONFIG_FILES(GNUmakefile)

#
# Generate/launch `config.status' (which in-turn generates makefiles, etc).
#
AC_OUTPUT

################################################################################
# END
################################################################################
